---------------------js파일만을 배포하기 위한 webpack----------------------
##p1폴더를 생성
cd p1 : 폴더이동
npm init -y : nods 폴더 초기화(package.json 생성)

##webpack라이브러리 설치
npm install --save-dev webpack
npm install --save-dev webpack-cli

##app.js 파일생성
console.log('webpack test');

##webpack.config.js팡일 생성(webpack설정파일 작성)
const path=require("path");
module.exports={
    mode : "development",
    entry : {main: "./app.js",}, 
    output : {
        filename: "[name].js",
        path: path.resolve(__dirname,"dist")
    },
}

설명: 주의사항 ./은 현재폴더에 app.js를 진입점을 의미하므로 반드시 ./필요
[name]은 entry의 main키값을 의미하며 
main.js파일이 dist폴더안에 생성됨을 의미(dist/main.js파일생성)
output의 path부분을 삭제한 후 실행도 해 볼것 

##webpack 컴파일(실행)
npx webpack
설명: dist폴더는 배포디렉토리이며 해당폴더에 main.js생성

---------------------css파일을 배포파일인 dist/main.js에 포함시키기(css+js=dist/main.js)------------------------
npm init -y
npm install --save-dev webpack
npm install --save-dev webpack-cli
npm install --save-dev style-loader
npm install --save-dev css-loader

##webpack.config.js
module:{
        rules:[
            {
                test: /\.css$/,
                use: ["style-loader","css-loader"]
            }
        ]
}
##style.css
body{background-color: aqua;}
##app.js
import './style.css'
console.log('webpack test');
##webpack컴파일
npx webpack

##index.html파일에서 컴파일인 dist폴더의 main.js가 정상동작하는지 확인
<script  src="./dist/main.js"></script>

----------------html+js 포함하여 배포파일만들기------------------------
npm install --save-dev html-webpack-plugin

##webpack.config.js
plugins:[
        new HtmlWebpackPlugin({
            template:'./index.html',
            filename:'index.html',
            chunks:['pc']
        })
    ]

설명:index.html파일을 폴더에 생성한 후 npx webpack을 실행하면
dist배포폴더에 app.js와 index.html파일이 같이 생성되는 것을 확인
index.html파일은 파일내용은 변화지 않고 있는 그대로 생성됨.
<script src="./app.js"></script>주의해서 설정할 것

----------------html파일에 css, js 링크를 포함하여 배포파일만들기-------------
npm init -y
npm install --save-dev webpack
npm install --save-dev webpack-cli
npm install --save-dev style-loader
npm install --save-dev css-loader
npm install --save-dev html-webpack-plugin
npm install --save-dev mini-css-extract-plugin
npm install --save-dev copy-webpack-plugin

프로젝파일에
index.html 파일생성
index.js, index.css 파일 생성
index.js파일안에 index.css파일을 import(포함)하고 index.css파일은 빈파일을 유지

##index.html
링크와 스크립트 없는 상태의 기본 html코드만 포함(!tab)

##index.js
import './index.css'

##webpack.config.js
const HtmlWebpackPlugin = require("html-webpack-plugin");
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const path=require("path");
module.exports={
    mode : "development",
    
    entry : {index: "./index.js",}, 
    
    output : {
        path:path.resolve(__dirname,"freedirectory"),
        filename: "[name].js",
    },
    
    module:{
        rules:[
            {
                test: /\.css$/i,
                use: [MiniCssExtractPlugin.loader,"css-loader"]
            }
        ]
    },
    plugins:[
        new HtmlWebpackPlugin({
            template:'./index.html',
            filename:'index.html',
            chunks:['index']
        }),
        new MiniCssExtractPlugin(),
    ]
}

#설명
entry : {index: "./index.js",} => [name]은 index를 의미한다.
filename: "[name].js" => index.js를 뜻한다.
path:path.resolve(__dirname,"freedirectory") =>__dirname은 현재 디렉토리를 의미하고
현재디렉토리에 freedirectory라는 디렉토리를 배포 디렉토리이름으로 사용하겠다는 의미
test: /\.css$/i =>i는 정규식의 대소문자를 구분하지 않는다는 의미
template:'./index.html' => 템플릿파일(원본)을 의미하고
filename:'index.html',  => 배포파일안의 이름을 지정
chunks:['index'] =>규격을 확인하기 위한 수단

npx webpack을 실행하면 index.html파일에 다음 코드가 추가되어 배포된 코드가 생성됨.
<script defer src="index.js"></script><link href="index.css" rel="stylesheet">

----------------html파일에 css, js 링크를 포함하는 2개이상의 배포파일만들기-------------
webview.html, pc.html 2개의 파일에 대한 webpack설정

##webview.html, webview.js, webview.css 파일생성
##pc.html, pc.js, pc.css 파일생성
##webpack.config.js파일 생성

##webview.js파일에 import './webview.css'
##pc.js파일에 import './pc.css'

##webpack.config.js








